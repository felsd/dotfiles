call plug#begin('~/.vim/plugged')
Plug 'chankaward/vim-railscasts-theme'
Plug 'tpope/vim-fugitive'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'psf/black', { 'branch': 'main' }
Plug 'brentyi/isort.vim'
Plug 'dylanaraps/wal.vim'
Plug 'neomake/neomake'
Plug 'sheerun/vim-polyglot'
Plug 'davidhalter/jedi-vim'
Plug 'gko/vim-coloresque'
Plug 'preservim/nerdtree'
Plug 'editorconfig/editorconfig-vim'
Plug 'tomtom/tcomment_vim'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/MatchTag'
Plug 'jceb/vim-orgmode'
Plug 'mattn/emmet-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ap/vim-buftabline'
Plug 'machakann/vim-highlightedyank'
Plug 'mattn/webapi-vim'
call plug#end()

" Color scheme
colorscheme railscasts
set background=light
hi Normal ctermbg=none

" Colors of folded sections
hi Folded ctermbg=darkgray
hi Folded ctermfg=white

" KEYBINDINGS
" Set leaderkey to space
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"
" Set localleader to ;
let maplocalleader = ";"
" Save file
map <Leader>fs :w<CR>
" Window splits
map <Leader>wv <C-w>v
map <Leader>wn <C-w>n
" Navigate through open buffers
map <Leader>wh <C-w><Left>
map <Leader>wl <C-w><Right>
map <Leader>wj <C-w><Down>
map <Leader>wk <C-w><Up>
" Navigate through buffers
map <Leader>bb :buffers<CR>:b 
map <Leader><Tab> :bp<CR>
map <Leader>bp :bp<CR>
map <Leader>bn :bn<CR>
map <Leader>bc :bd<CR>
" Kill current buffer and focus last buffer
map <Leader>wx :bd<CR><Plug>BufTabLine.Go(-1)
" Kill all buffers except the current one
"map <Leader>wo :execute "%bd\|e#\|bd#"<CR>
map <Leader>wo :call OnlyAndNerdtree('', '')<CR>
" Quit current buffer
map <Leader>wq :q!<CR>
" Quit all buffers
map <Leader>qq :qa!<CR>
" Open nerdtree
map <Leader>pt :NERDTreeToggle<CR>
" Fuzzy search in project dir files
let g:ctrlp_map = '<Leader>pf'
let g:ctrlp_working_path_mode = 'ra'
" Fuzzy search in project dir file contents
let g:ackprg = 'rg --vimgrep --type-not sql --smart-case'
let g:ack_autoclose = 1
let g:ack_use_cword_for_empty_search = 1
cnoreabbrev Ack Ack!
function! Find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
command! -nargs=1 Ag execute "Ack! <args> " . Find_git_root()
nnoremap <Leader>/ :Ag<Space>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>
" Git
map <Leader>gs :Git<CR>
map <Leader>gc :Git commit<CR>
map <Leader>gpu :Git push<CR>
map <Leader>gpl :Git pull<CR>
map <Leader>glog :Gclog<CR>
map <Leader>gm :Git merge<CR>
map <Leader>gf :Git fetch<CR>
map <Leader>gh :diffget //2<CR>
map <Leader>gl :diffget //3<CR>
" Refresh GitGutter in all buffers
map <Leader>gg :bufdo execute ":GitGutter"<CR>
" Emmet
map <Leader>ee <c-y>,i
map <Leader>en <c-y>,i<CR><Esc>ko
" Exit insert mode with fd
" imap fd <Esc>
" Reload syntax highlighting
noremap <F5> <Esc>:filetype detect<CR>
" js-beautify
map <Leader>ff :'<,'>!js-beautify -s 2 -f -<CR>
map <Leader>fa mp:%!js-beautify -s 2 -f -<CR>'p
" markdown-pdf + open in zathura
map <Leader>md :!markdown-pdf %:p && zathura --synctex-forward :: %:p:r.pdf & <Enter><Enter>
" imap shortcuts
imap cll console.log();<Esc>==f(a


" Enable clipboard
set clipboard=unnamedplus

" Show split right
set splitbelow splitright

" Enable autocompletion
set wildmode=longest,list,full

" Automatically show search result count
set shortmess-=S

" show line numbers
set number
highlight LineNr ctermfg=darkGray

" change cursor depending on mode
" if exists('$TMUX')
"   let &t_SI = "\ePtmux;\e\e[6 q\e\\"
"   let &t_SR = "\ePtmux;\e\e[4 q\e\\"
"   let &t_EI = "\ePtmux;\e\e[2 q\e\\"
"   augroup setCursor
"       au!
"       autocmd VimEnter * silent !echo -ne "\ePtmux;\e\e[2 q\e\\"
"       autocmd VimEnter * redraw!
"   augroup end
" else
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
augroup setCursor
  au!
  autocmd VimEnter * silent !echo -ne "\e[2 q"
  autocmd VimEnter * redraw!
augroup end
" endif
set ttimeoutlen=0

" set default indent to 2 spaces
set shiftwidth=2
set softtabstop=2

" size of a hard tabstop
set tabstop=4

" always uses spaces instead of tab characters
set expandtab

" size of an "indent"
set shiftwidth=4

" indents
autocmd FileType python setlocal shiftwidth=4 softtabstop=2 expandtab
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType vue setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType html setlocal shiftwidth=2 softtabstop=2 expandtab

" Don't treat underscore as keyword
set iskeyword-=_

" hybrid line numbers
:set number relativenumber
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Python syntax highlighting
let g:python_highlight_builtins=1
let g:python_highlight_builtin_objs=1
let g:python_highlight_builtin_types=1
let g:python_highlight_builtin_funcs=1
let g:python_highlight_builtin_funcs_kwarg=1
let g:python_highlight_exceptions=1
let g:python_highlight_string_formatting=1
let g:python_highlight_string_format=1
let g:python_highlight_string_templates=0
let g:python_highlight_indent_errors=1
let g:python_highlight_space_errors=1
let g:python_highlight_doctests=1
let g:python_highlight_func_calls=0
let g:python_highlight_class_vars=1
let g:python_highlight_operators=1
let g:python_highlight_file_headers_as_comments=1
let g:python_slow_sync=1

" Xresources files
autocmd BufReadPost ~/.Xresources.d/* setf xdefaults
" au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
" Run xrdb automatically
autocmd BufWritePost ~/.Xresources,~/.Xdefaults !xrdb %
autocmd BufWritePost ~/.Xresources.d/* !xrdb ~/.Xresources

" Run isort after saving .py files
autocmd BufWritePost *.py execute ':Isort'
" Run black before saving .py files
autocmd BufWritePre *.py execute ':Black'

" Restart sxhkd after changing the bindings
autocmd BufWritePost *sxhkdrc !pkill sxhkd && sxhkd &

" Set colors of highlighted text
hi Visual ctermbg=0 ctermfg=15 cterm=reverse term=reverse

" Neomake
call neomake#configure#automake('wn', 200)

" Gitgutter
" vim-gitgutter used to do this by default:
highlight! link SignColumn LineNr
" or you could do this:
highlight SignColumn guibg=NONE ctermbg=NONE

" vim-buftabline
hi BufTabLineCurrent ctermbg=0 ctermfg=15 gui=underline
"hi BufTabLineActive ctermbg=0 ctermfg=15
hi BufTabLineHidden ctermbg=250 ctermfg=0
hi BufTabLineFill ctermbg=0 ctermfg=0
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)
let g:buftabline_numbers=2

" vim-highlightedyank
let g:highlightedyank_highlight_duration = 300
" highlight HighlightedyankRegion cterm=reverse gui=reverse
highlight HighlightedyankRegion ctermbg=66 gui=reverse

" emmet snippets
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim/emmet_snippets.json')), "\n"))

" coc-vim
set hidden
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  " inoremap <silent><expr> <C-@> coc#refresh()
  imap <C-@> <Down><CR>
endif
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Jump to definition etc
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gD <Plug>(coc-implementation)

" Function that closes all windows except the current one and NERDtree
function! OnlyAndNerdtree(buffer, bang)
  if a:buffer == ''
      " No buffer provided, use the current buffer.
		let buffer = bufnr('%')
	elseif (a:buffer + 0) > 0
		" A buffer number was provided.
		let buffer = bufnr(a:buffer + 0)
	else
		" A buffer name was provided.
		let buffer = bufnr(a:buffer)
	endif

	if buffer == -1
		echohl ErrorMsg
		echomsg "No matching buffer for" a:buffer
		echohl None
		return
	endif

	let last_buffer = bufnr('$')

	let delete_count = 0
	let n = 1
	while n <= last_buffer
		if n != buffer && buflisted(n)
			if a:bang == '' && getbufvar(n, '&modified')
				echohl ErrorMsg
				echomsg 'No write since last change for buffer'
							\ n '(add ! to override)'
				echohl None
			else
				silent exe 'bdel' . a:bang . ' ' . n
				if ! buflisted(n)
					let delete_count = delete_count+1
				endif
			endif
		endif
		let n = n+1
	endwhile

	if delete_count == 1
		echomsg delete_count "buffer deleted"
	elseif delete_count > 1
		echomsg delete_count "buffers deleted"
	endif
endfunction

set laststatus=2
